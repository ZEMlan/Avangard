<?xml version="1.0" encoding="utf-8"?>
<mission>
      <score>26</score>
      <task>?????? System;

void bubbleSort(int []arr)
    {
        int n = arr.Length;
        for (int i = 0; i &lt; n - 1; i++)
            ??? (int j = 0; j &lt; n - i - 1; j++)
                if (arr[j] &gt; arr[j + 1])
                {
                    ??? temp = arr[j];
                    ????? = arr[j + 1];
                    arr[j + 1] = ?????
                }
    }

void selectionSort(int []arr)
    {
        int n = ???.Length;

        ???? (int i = 0; i &lt; n - 1; i++)
        {
            int min_idx = i;
            for (int j = i + 1; j &lt; n; j++)
                if (arr[j] &lt; ???[min_idx])
                    min_idx = j;

            int ???  = arr[min_idx];
            arr[??????] = arr[i];
            arr[i] = temp;
        }
    }

 ????? InsertionSort(int[] arr)
    {
        int n = arr.?????;
        for (int i = 1; i &lt; n; ++i) {
            int ??? = arr[i];
            int j = i - 1;
            ?????(j &gt;= 0 &amp;&amp; arr[j] &gt; key) {
                arr[j + 1] = arr[j];
                j = j - 1;
            }
            ???[j + 1] = key;
        }
    }

 static int ???????(int []arr, int low,
                                   int high)
    {
        int ?????? = arr[high];

        int i = (low - 1);
        for (int j = low; j &lt; high; j++)
        {
            ?? (arr[j] &lt; pivot)
            {
                i???

                int temp = arr[i];
                arr[i] = ??????;
                arr[j] = temp;
            }
        }

        int ????? = arr[i+1];
        arr[i+1] = arr[high];
        arr[high] = temp1;

        ?????? i+1;
    }


static ???? quickSort(int []arr, int low, int high)
    {
        if (low &lt; high)
        {

            ??? pi = partition(arr, low, high);

            quickSort(arr, low, pi-1);
            ?????????(arr, pi+1, high);
        }
    }</task>
      <check>using System;

void bubbleSort(int []arr)
    {
        int n = arr.Length;
        for (int i = 0; i &lt; n - 1; i++)
            for (int j = 0; j &lt; n - i - 1; j++)
                if (arr[j] &gt; arr[j + 1])
                {
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
    }

void selectionSort(int []arr)
    {
        int n = arr.Length;

        for (int i = 0; i &lt; n - 1; i++)
        {
            int min_idx = i;
            for (int j = i + 1; j &lt; n; j++)
                if (arr[j] &lt; arr[min_idx])
                    min_idx = j;

            int temp = arr[min_idx];
            arr[min_idx] = arr[i];
            arr[i] = temp;
        }
    }

 void InsertionSort(int[] arr)
    {
        int n = arr.Length;
        for (int i = 1; i &lt; n; ++i) {
            int key = arr[i];
            int j = i - 1;
            while (j &gt;= 0 &amp;&amp; arr[j] &gt; key) {
                arr[j + 1] = arr[j];
                j = j - 1;
            }
            arr[j + 1] = key;
        }
    }

 static int partition(int []arr, int low,
                                   int high)
    {
        int pivot = arr[high];

        int i = (low - 1);
        for (int j = low; j &lt; high; j++)
        {
            if (arr[j] &lt; pivot)
            {
                i++;

                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }

        int temp1 = arr[i+1];
        arr[i+1] = arr[high];
        arr[high] = temp1;

        return i+1;
    }


static void quickSort(int []arr, int low, int high)
    {
        if (low &lt; high)
        {

            int pi = partition(arr, low, high);

            quickSort(arr, low, pi-1);
            quickSort(arr, pi+1, high);
        }
    }</check>
</mission>




