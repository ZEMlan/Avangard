<?xml version="1.0" encoding="utf-8"?>
<mission>
      <score>21</score>
      <task>????? System;
????? System.Collections.Generic;

const ??? needle = 1000;

        ??? Search (int need_int, int start, int end, int[] haystack) {
            if (start &gt; end) {
                ??????? start - 1;
            }
            ????? {
                int middle = (start + end) / 2;
                if (need_int == haystack[middle]) {
                    return ?????;
                }
                else ?? (need_int &gt; haystack[middle]) {
                    return ?????(need_int, middle + 1, end, haystack);
                }
                else {
                    return Search(need_int, start, ?????? - 1, haystack);
                }
            }
        }
        ???[] SortHaystack(string haystack) {
            string[] new_haystack = haystack.Split();
            int[] new_int_haystack = new ???[new_haystack.Length];
            ???(int i = 0; i &lt; new_haystack.Length; i++) {
                new_int_haystack[i] = int.?????(new_haystack[i]);
            }
            int a = new_int_haystack.???????;
            for (int i = 0; i &lt; a - 1; i++) {
                ???(int j = i; j &lt; a; j++) {
                    if (new_int_haystack[i] &gt; new_int_haystack[j]) {
                        int t = new_int_haystack[i];
                        new_int_haystack[i] = new_int_haystack[j];
                        new_int_haystack[j] = t;
                    }
                }
            }
            ???????? new_int_haystack;
        }
        static ???? Main(string[] args) {
            string haystack = ???????.ReadLine();
            int[] ??????? = Searcher.SortHaystack(haystack);
            for (int i = 0; i &lt; sorted.Length; i++) {
                Console.Write(sorted[i] + " ");
            }
            Console.??????(Searcher.Search(needle, 0, sorted.Length, sorted) + 1);
        }</task>
      <check>using System;
using System.Collections.Generic;

const int needle = 1000;

        int Search (int need_int, int start, int end, int[] haystack) {
            if (start &gt; end) {
                return start - 1;
            }
            else {
                int middle = (start + end) / 2;
                if (need_int == haystack[middle]) {
                    return middle;
                }
                else if (need_int &gt; haystack[middle]) {
                    return Search(need_int, middle + 1, end, haystack);
                }
                else {
                    return Search(need_int, start, middle - 1, haystack);
                }
            }
        }
        int[] SortHaystack(string haystack) {
            string[] new_haystack = haystack.Split();
            int[] new_int_haystack = new int[new_haystack.Length];
            for(int i = 0; i &lt; new_haystack.Length; i++) {
                new_int_haystack[i] = int.Parse(new_haystack[i]);
            }
            int a = new_int_haystack.Length;
            for (int i = 0; i &lt; a - 1; i++) {
                for (int j = i; j &lt; a; j++) {
                    if (new_int_haystack[i] &gt; new_int_haystack[j]) {
                        int t = new_int_haystack[i];
                        new_int_haystack[i] = new_int_haystack[j];
                        new_int_haystack[j] = t;
                    }
                }
            }
            return new_int_haystack;
        }
        static void Main(string[] args) {
            string haystack = Console.ReadLine();
            int[] sorted = Searcher.SortHaystack(haystack);
            for (int i = 0; i &lt; sorted.Length; i++) {
                Console.Write(sorted[i] + " ");
            }
            Console.WriteLine(Searcher.Search(needle, 0, sorted.Length, sorted) + 1);
        }</check>
</mission>





