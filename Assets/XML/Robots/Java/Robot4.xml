<?xml version="1.0" encoding="utf-8"?>
<mission>
      <score>26</score>
      <task>package magic.magic;

public ????? Sortings {

    void bubbleSort(int[] ???) {
        int n = arr.??????;
        for (int i = 0; i &lt; n - 1; i++)
            for (int j = 0; j &lt; n - i - 1; j++)
                if (????[j] &gt; arr[j + 1]) {
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = ????
                }
    }

    void insertionSort(???[] arr) {
        int n = arr.length;
        for (int i = 1; i &lt; n; ++i) {
            int key = arr[i];
            int j = i - 1;

            ?????(j &gt;= 0 &amp;&amp; arr[j] &gt; key) {
                arr[j + 1] = arr[j];
                j = j - 1;
            }
            arr[j + 1] = ????
        }
    }

    void ?????(int[] arr, int l, int m, int r) {
        int n1 = m - l + 1;
        int n2 = r - m;
        int[] ? = new int[n1];
        int[] R = new int[n2];

        ???(int i = 0; i &lt; n1; ++i)
            L[i] = arr[l + i];
        ???(int j = 0; j &lt; n2; ++j)
            R[j] = arr[m + 1 + j];

        int i = 0, j = 0;
        ??? k = l;
        while (i &lt; n1 &amp;&amp; j &lt; n2) {
            if (L[i] &lt;= ?[j]) {
                arr[k] = L[i];
                i???
            } else {
                arr[k] = R[j];
                j++;
            }
            k???
        }

        ????? (i &lt; n1) {
            arr[k] = L[i];
            i++;
            k++;
        }

        while (j &lt; n2) {
            arr[k] = R[j];
            j???
            k++;
        }
    }

    void sort(int[] arr, int l, int r) {
        if (l &lt; r) {
            int m = (l + r) / 2;

            sort(arr, l, m);
            sort(arr, m + 1, r);

            ?????(arr, l, m, r);
        }
    }

    void sort(char[] arr) {
        ??? n = arr.length;
        char[] ?????? = new char[n];
        int[] count = new int[256];
        for (int i = 0; i &lt; 256; ++i)
            ?????[i] = 0;

        ???(var value : arr)
            ++count[value];

        for (int i = 1; i &lt;= 255; ++i)
            count[i] += ?????[i - 1];

        for (char c : ???){
            output[count[c] - 1] = c;
            --count[c];
        }

        ??? (int i = 0; i &lt; n; ++i)
            arr[i] = output[i];
    }
}</task>
      <check>package magic.magic;

public class Sortings {

    void bubbleSort(int[] arr) {
        int n = arr.length;
        for (int i = 0; i &lt; n - 1; i++)
            for (int j = 0; j &lt; n - i - 1; j++)
                if (arr[j] &gt; arr[j + 1]) {
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
    }

    void insertionSort(int[] arr) {
        int n = arr.length;
        for (int i = 1; i &lt; n; ++i) {
            int key = arr[i];
            int j = i - 1;

            while (j &gt;= 0 &amp;&amp; arr[j] &gt; key) {
                arr[j + 1] = arr[j];
                j = j - 1;
            }
            arr[j + 1] = key;
        }
    }

    void merge(int[] arr, int l, int m, int r) {
        int n1 = m - l + 1;
        int n2 = r - m;
        int[] L = new int[n1];
        int[] R = new int[n2];

        for (int i = 0; i &lt; n1; ++i)
            L[i] = arr[l + i];
        for (int j = 0; j &lt; n2; ++j)
            R[j] = arr[m + 1 + j];

        int i = 0, j = 0;
        int k = l;
        while (i &lt; n1 &amp;&amp; j &lt; n2) {
            if (L[i] &lt;= R[j]) {
                arr[k] = L[i];
                i++;
            } else {
                arr[k] = R[j];
                j++;
            }
            k++;
        }

        while (i &lt; n1) {
            arr[k] = L[i];
            i++;
            k++;
        }

        while (j &lt; n2) {
            arr[k] = R[j];
            j++;
            k++;
        }
    }

    void sort(int[] arr, int l, int r) {
        if (l &lt; r) {
            int m = (l + r) / 2;

            sort(arr, l, m);
            sort(arr, m + 1, r);

            merge(arr, l, m, r);
        }
    }

    void countingSort(char[] arr) {
        int n = arr.length;
        char[] output = new char[n];
        int[] count = new int[256];
        for (int i = 0; i &lt; 256; ++i)
            count[i] = 0;

        for (char value : arr)
            ++count[value];

        for (int i = 1; i &lt;= 255; ++i)
            count[i] += count[i - 1];

        for (char c : arr) {
            output[count[c] - 1] = c;
            --count[c];
        }

        for (int i = 0; i &lt; n; ++i)
            arr[i] = output[i];
    }
}</check>
</mission>




